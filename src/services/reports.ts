import type { DailyReport, WeeklyReport, MonthlyReport, PlayerDailyReport, PlayerStatus } from '../types/report';

/**
 * Generate mock daily report
 * In production, this would be generated by backend at 00:00 daily
 */
export function generateDailyReport(): DailyReport {
  const today = new Date().toISOString();

  const players: PlayerDailyReport[] = [
    {
      playerId: '1',
      playerName: 'John Smith',
      position: 'RB',
      status: 'active',
      workoutsCompleted: 1,
      workoutsAssigned: 1,
      minutesTrained: 65,
      currentScore: 95,
      previousScore: 90,
      scoreTrend: 5.6,
      compliance: 100,
      attendance: true,
      lastActive: today,
    },
    {
      playerId: '2',
      playerName: 'Mike Johnson',
      position: 'WR',
      status: 'active',
      workoutsCompleted: 1,
      workoutsAssigned: 1,
      minutesTrained: 58,
      currentScore: 92,
      previousScore: 92,
      scoreTrend: 0,
      compliance: 100,
      attendance: true,
      lastActive: today,
    },
    {
      playerId: '3',
      playerName: 'Chris Brown',
      position: 'LB',
      status: 'partial',
      workoutsCompleted: 0,
      workoutsAssigned: 1,
      minutesTrained: 30,
      currentScore: 89,
      previousScore: 92,
      scoreTrend: -3.3,
      compliance: 0,
      attendance: true,
      lastActive: today,
    },
    {
      playerId: '4',
      playerName: 'David Wilson',
      position: 'OL',
      status: 'absent',
      workoutsCompleted: 0,
      workoutsAssigned: 1,
      minutesTrained: 0,
      currentScore: 86,
      previousScore: 94,
      scoreTrend: -8.5,
      compliance: 0,
      attendance: false,
      lastActive: new Date(Date.now() - 86400000).toISOString(), // yesterday
    },
    {
      playerId: '5',
      playerName: 'James Davis',
      position: 'DB',
      status: 'active',
      workoutsCompleted: 1,
      workoutsAssigned: 1,
      minutesTrained: 72,
      currentScore: 83,
      previousScore: 80,
      scoreTrend: 3.8,
      compliance: 100,
      attendance: true,
      lastActive: today,
    },
    {
      playerId: '6',
      playerName: 'Robert Miller',
      position: 'QB',
      status: 'active',
      workoutsCompleted: 1,
      workoutsAssigned: 1,
      minutesTrained: 55,
      currentScore: 80,
      previousScore: 78,
      scoreTrend: 2.6,
      compliance: 100,
      attendance: true,
      lastActive: today,
    },
    {
      playerId: '7',
      playerName: 'Tom Anderson',
      position: 'DL',
      status: 'partial',
      workoutsCompleted: 0,
      workoutsAssigned: 1,
      minutesTrained: 25,
      currentScore: 77,
      previousScore: 77,
      scoreTrend: 0,
      compliance: 0,
      attendance: true,
      lastActive: today,
    },
    {
      playerId: '8',
      playerName: 'Alex Taylor',
      position: 'TE',
      status: 'active',
      workoutsCompleted: 1,
      workoutsAssigned: 1,
      minutesTrained: 68,
      currentScore: 74,
      previousScore: 70,
      scoreTrend: 5.7,
      compliance: 100,
      attendance: true,
      lastActive: today,
    },
  ];

  const activePlayers = players.filter(p => p.status === 'active').length;
  const partialPlayers = players.filter(p => p.status === 'partial').length;
  const absentPlayers = players.filter(p => p.status === 'absent').length;
  const avgScore = Math.round(players.reduce((sum, p) => sum + p.currentScore, 0) / players.length);
  const avgCompliance = Math.round(players.reduce((sum, p) => sum + p.compliance, 0) / players.length);
  const totalMinutes = players.reduce((sum, p) => sum + p.minutesTrained, 0);

  return {
    summary: {
      period: 'day',
      dateISO: today,
      totalPlayers: players.length,
      activePlayers,
      partialPlayers,
      absentPlayers,
      avgScore,
      avgCompliance,
      totalMinutes,
      avgMinutesPerPlayer: Math.round(totalMinutes / players.length),
      topPerformers: ['1', '2', '5'], // Top 3 by score trend
      needsAttention: ['4'], // Declining significantly
    },
    players,
    generatedAt: today,
  };
}

/**
 * Generate mock weekly report
 */
export function generateWeeklyReport(): WeeklyReport {
  const dailyReport = generateDailyReport();

  // Simulate 7 days of data
  const dailyBreakdown = Array.from({ length: 7 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (6 - i));
    return {
      date: date.toISOString().split('T')[0],
      activePlayers: Math.floor(Math.random() * 3) + 6, // 6-8 players
      avgScore: Math.floor(Math.random() * 10) + 80, // 80-90
      totalMinutes: Math.floor(Math.random() * 100) + 300, // 300-400
    };
  });

  return {
    summary: {
      ...dailyReport.summary,
      period: 'week',
    },
    players: dailyReport.players,
    dailyBreakdown,
    generatedAt: new Date().toISOString(),
  };
}

/**
 * Generate mock monthly report
 */
export function generateMonthlyReport(): MonthlyReport {
  const dailyReport = generateDailyReport();

  // Simulate 4 weeks of data
  const weeklyBreakdown = Array.from({ length: 4 }, (_, i) => ({
    week: `Week ${i + 1}`,
    activePlayers: Math.floor(Math.random() * 2) + 7, // 7-8 players
    avgScore: Math.floor(Math.random() * 10) + 80, // 80-90
    totalMinutes: Math.floor(Math.random() * 500) + 2000, // 2000-2500
  }));

  return {
    summary: {
      ...dailyReport.summary,
      period: 'month',
    },
    players: dailyReport.players,
    weeklyBreakdown,
    improvements: [
      { playerId: '1', playerName: 'John Smith', improvement: 12.5 },
      { playerId: '5', playerName: 'James Davis', improvement: 8.3 },
      { playerId: '8', playerName: 'Alex Taylor', improvement: 15.2 },
    ],
    declines: [
      { playerId: '4', playerName: 'David Wilson', decline: -18.5 },
      { playerId: '3', playerName: 'Chris Brown', decline: -6.2 },
    ],
    generatedAt: new Date().toISOString(),
  };
}

/**
 * Get status color for player
 */
export function getStatusColor(status: PlayerStatus): 'success' | 'warning' | 'error' {
  switch (status) {
    case 'active':
      return 'success';
    case 'partial':
      return 'warning';
    case 'absent':
      return 'error';
  }
}

/**
 * Get status icon component name for player
 */
export function getStatusIcon(status: PlayerStatus): 'active' | 'partial' | 'absent' {
  return status;
}

/**
 * Get trend direction based on percentage change
 */
export function getTrendDirection(trend: number): 'up' | 'down' | 'flat' {
  if (trend > 2) return 'up';
  if (trend < -2) return 'down';
  return 'flat';
}

/**
 * Get trend color
 */
export function getTrendColor(trend: number): 'success' | 'warning' | 'error' {
  if (trend > 2) return 'success';
  if (trend < -2) return 'error';
  return 'warning';
}
